-- ENHANCED SELLER DATABASE SCHEMA (SNAKE_CASE)

CREATE TABLE SELLERS (
    SELLER_ID INT IDENTITY(1,1) PRIMARY KEY,
    STORE_NAME NVARCHAR(100) NOT NULL,
    OWNER_NAME NVARCHAR(100),
    EMAIL NVARCHAR(100) UNIQUE NOT NULL,
    PHONE NVARCHAR(20),
    ADDRESS NVARCHAR(200),
    CITY NVARCHAR(50),
    STATE NVARCHAR(50),
    STATUS NVARCHAR(20) DEFAULT 'ACTIVE' CHECK (STATUS IN ('ACTIVE','SUSPENDED','INACTIVE')),
    RATING DECIMAL(3,2) DEFAULT 0.0,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    LAST_LOGIN DATETIME
);

CREATE TABLE SELLER_PROFILES (
    PROFILE_ID INT IDENTITY(1,1) PRIMARY KEY,
    SELLER_ID INT NOT NULL,
    BIO NVARCHAR(1000),
    LOGO NVARCHAR(255),
    ESTABLISHED_YEAR INT,
    TOTAL_PRODUCT INT DEFAULT 0,
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID)
);

CREATE TABLE SELLER_PRODUCT (
    PRODUCT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SELLER_ID INT NOT NULL,
    PRODUCT_NAME NVARCHAR(100) NOT NULL,
    CATEGORY NVARCHAR(50),
    DESCRIPTION NVARCHAR(MAX),
    PRICE DECIMAL(10,2) CHECK (PRICE >= 0),
    STOCK_QTY INT DEFAULT 0 CHECK (STOCK_QTY >= 0),
    STATUS NVARCHAR(20) DEFAULT 'AVAILABLE' CHECK (STATUS IN ('AVAILABLE','OUT OF STOCK','DISCONTINUED')),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID)
);

CREATE TABLE SELLER_PRODUCT_IMAGES (
    IMAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    PRODUCT_ID INT NOT NULL,
    URL NVARCHAR(255),
    ALT_TEXT NVARCHAR(255),
    UPLOADED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (PRODUCT_ID) REFERENCES SELLER_PRODUCT(PRODUCT_ID)
);

CREATE TABLE SELLER_ORDERS (
    ORDER_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    SELLER_ID INT NOT NULL,
    ORDER_DATE DATETIME DEFAULT GETDATE(),
    STATUS NVARCHAR(20) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
    TOTAL_AMOUNT DECIMAL(10,2) CHECK (TOTAL_AMOUNT >= 0),
    DELIVERY_ADDRESS NVARCHAR(200),
    PAYMENT_STATUS NVARCHAR(20) DEFAULT 'PENDING' CHECK (PAYMENT_STATUS IN ('PENDING','PAID','FAILED','REFUNDED')),
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID)
);

CREATE TABLE SELLER_ORDER_ITEMS (
    ORDER_ITEM_ID INT IDENTITY(1,1) PRIMARY KEY,
    ORDER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    QUANTITY INT NOT NULL CHECK (QUANTITY > 0),
    UNIT_PRICE DECIMAL(10,2) CHECK (UNIT_PRICE >= 0),
    SUBTOTAL DECIMAL(10,2) CHECK (SUBTOTAL >= 0),
    FOREIGN KEY (ORDER_ID) REFERENCES SELLER_ORDERS(ORDER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES SELLER_PRODUCT(PRODUCT_ID)
);

CREATE TABLE SELLER_PAYMENTS (
    PAYMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ORDER_ID INT NOT NULL,
    AMOUNT DECIMAL(10,2) CHECK (AMOUNT >= 0),
    METHOD NVARCHAR(50) CHECK (METHOD IN ('CREDIT CARD','DEBIT CARD','WALLET','BANK TRANSFER','CASH ON DELIVERY')),
    STATUS NVARCHAR(20) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING','COMPLETED','FAILED','REFUNDED')),
    PAYMENT_DATE DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ORDER_ID) REFERENCES SELLER_ORDERS(ORDER_ID)
);

CREATE TABLE SELLER_WALLETS (
    WALLET_ID INT IDENTITY(1,1) PRIMARY KEY,
    SELLER_ID INT NOT NULL,
    BALANCE DECIMAL(12,2) DEFAULT 0.00 CHECK (BALANCE >= 0),
    LAST_RECHARGED DATETIME,
    WALLET_STATUS NVARCHAR(20) DEFAULT 'ACTIVE' CHECK (WALLET_STATUS IN ('ACTIVE','INACTIVE','SUSPENDED')),
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID)
);

CREATE TABLE SELLER_PAYOUTS (
    PAYOUT_ID INT IDENTITY(1,1) PRIMARY KEY,
    WALLET_ID INT NOT NULL,
    AMOUNT DECIMAL(10,2) CHECK (AMOUNT >= 0),
    PAYOUT_DATE DATETIME DEFAULT GETDATE(),
    STATUS NVARCHAR(20) DEFAULT 'PROCESSING' CHECK (STATUS IN ('PROCESSING','COMPLETED','FAILED')),
    FOREIGN KEY (WALLET_ID) REFERENCES SELLER_WALLETS(WALLET_ID)
);

CREATE TABLE SELLER_REVIEWS (
    REVIEW_ID INT IDENTITY(1,1) PRIMARY KEY,
    SELLER_ID INT NOT NULL,
    BUYER_ID INT NOT NULL,
    RATING INT NOT NULL CHECK (RATING BETWEEN 1 AND 5),
    COMMENT NVARCHAR(1000),
    REVIEW_DATE DATETIME DEFAULT GETDATE(),
    VERIFIED_PURCHASE BIT DEFAULT 0,
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID)
);



-- ENHANCED EMPLOYEE DATABASE SCHEMA (SNAKE_CASE)

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID INT IDENTITY(1,1) PRIMARY KEY,
    FIRST_NAME NVARCHAR(50) NOT NULL,
    LAST_NAME NVARCHAR(50) NOT NULL,
    EMAIL NVARCHAR(100) UNIQUE NOT NULL,
    PHONE NVARCHAR(20),
    HIRE_DATE DATE,
    JOB_TITLE NVARCHAR(100),
    STATUS NVARCHAR(20) DEFAULT 'ACTIVE' CHECK (STATUS IN ('ACTIVE','ON LEAVE','RESIGNED','TERMINATED')),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    LAST_LOGIN DATETIME
);

CREATE TABLE DEPARTMENTS (
    DEPARTMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    NAME NVARCHAR(100) NOT NULL,
    LOCATION NVARCHAR(100),
    MANAGER_ID INT,
    BUDGET DECIMAL(12,2),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE ROLES (
    ROLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TITLE NVARCHAR(100) NOT NULL,
    DESCRIPTION NVARCHAR(500),
    SALARY_RANGE NVARCHAR(50),
    CREATED_AT DATETIME DEFAULT GETDATE()
);

CREATE TABLE EMPLOYEE_ROLES (
    EMPLOYEE_ROLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    EMPLOYEE_ID INT NOT NULL,
    ROLE_ID INT NOT NULL,
    START_DATE DATE,
    END_DATE DATE,
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID)
);

CREATE TABLE PROJECTS (
    PROJECT_ID INT IDENTITY(1,1) PRIMARY KEY,
    NAME NVARCHAR(100) NOT NULL,
    DEPARTMENT_ID INT NOT NULL,
    START_DATE DATE,
    END_DATE DATE,
    BUDGET DECIMAL(12,2),
    STATUS NVARCHAR(20) DEFAULT 'ACTIVE' CHECK (STATUS IN ('ACTIVE','COMPLETED','CANCELLED')),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);

CREATE TABLE ASSIGNMENTS (
    ASSIGNMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    PROJECT_ID INT NOT NULL,
    EMPLOYEE_ID INT NOT NULL,
    ROLE NVARCHAR(50),
    HOURS_WORKED DECIMAL(6,2),
    ASSIGNED_DATE DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(PROJECT_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE SALARIES (
    SALARY_ID INT IDENTITY(1,1) PRIMARY KEY,
    EMPLOYEE_ID INT NOT NULL,
    AMOUNT DECIMAL(10,2),
    CURRENCY NVARCHAR(10) DEFAULT 'NGN',
    START_DATE DATE,
    END_DATE DATE,
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE ATTENDANCE (
    ATTENDANCE_ID INT IDENTITY(1,1) PRIMARY KEY,
    EMPLOYEE_ID INT NOT NULL,
    DATE DATE,
    STATUS NVARCHAR(20) CHECK (STATUS IN ('PRESENT','ABSENT','LATE','ON LEAVE')),
    CHECK_IN TIME,
    CHECK_OUT TIME,
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE PERFORMANCE_REVIEWS (
    REVIEW_ID INT IDENTITY(1,1) PRIMARY KEY,
    EMPLOYEE_ID INT NOT NULL,
    REVIEWER_ID INT,
    RATING INT CHECK (RATING BETWEEN 1 AND 5),
    COMMENTS NVARCHAR(1000),
    REVIEW_DATE DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    FOREIGN KEY (REVIEWER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE TRAININGS (
    TRAINING_ID INT IDENTITY(1,1) PRIMARY KEY,
    EMPLOYEE_ID INT NOT NULL,
    TOPIC NVARCHAR(100),
    PROVIDER NVARCHAR(100),
    COMPLETION_DATE DATE,
    STATUS NVARCHAR(20) CHECK (STATUS IN ('COMPLETED','IN PROGRESS','NOT STARTED')),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);



-- ENHANCED BUYER DATABASE SCHEMA (SNAKE_CASE)

CREATE TABLE BUYERS (
    BUYER_ID INT IDENTITY(1,1) PRIMARY KEY,
    FIRST_NAME NVARCHAR(50) NOT NULL,
    LAST_NAME NVARCHAR(50) NOT NULL,
    EMAIL NVARCHAR(100) UNIQUE NOT NULL,
    PHONE NVARCHAR(20),
    ADDRESS NVARCHAR(200),
    CITY NVARCHAR(50),
    STATE NVARCHAR(50),
    JOIN_DATE DATE DEFAULT GETDATE(),
    LAST_LOGIN DATETIME,
    LOYALTY_POINTS INT DEFAULT 0,
    TIER NVARCHAR(20) DEFAULT 'BRONZE' CHECK (TIER IN ('BRONZE','SILVER','GOLD','PLATINUM'))
);

CREATE TABLE BUYER_PROFILES (
    PROFILE_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    PREFERENCES NVARCHAR(500),
    DATE_OF_BIRTH DATE,
    GENDER NVARCHAR(10),
    OCCUPATION NVARCHAR(100),
    FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID)
);

CREATE TABLE BUYER_PRODUCT (
    PRODUCT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SELLER_ID INT NOT NULL,
    PRODUCT_NAME NVARCHAR(100) NOT NULL,
    CATEGORY NVARCHAR(50),
    DESCRIPTION NVARCHAR(MAX),
    PRICE DECIMAL(10,2) CHECK (PRICE >= 0),
    STOCK_QTY INT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT GETDATE()
);

CREATE TABLE BUYER_ORDERS (
    ORDER_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    ORDER_DATE DATETIME DEFAULT GETDATE(),
    STATUS NVARCHAR(20) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
    TOTAL_AMOUNT DECIMAL(10,2) CHECK (TOTAL_AMOUNT >= 0),
    DELIVERY_ADDRESS NVARCHAR(200),
    PAYMENT_STATUS NVARCHAR(20) DEFAULT 'PENDING' CHECK (PAYMENT_STATUS IN ('PENDING','PAID','FAILED','REFUNDED')),
    FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID)
);

CREATE TABLE BUYER_ORDER_ITEMS (
    ORDER_ITEM_ID INT IDENTITY(1,1) PRIMARY KEY,
    ORDER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    QUANTITY INT NOT NULL CHECK (QUANTITY > 0),
    UNIT_PRICE DECIMAL(10,2) CHECK (UNIT_PRICE >= 0),
    SUBTOTAL DECIMAL(10,2) CHECK (SUBTOTAL >= 0),
    FOREIGN KEY (ORDER_ID) REFERENCES BUYER_ORDERS(ORDER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES BUYER_PRODUCT(PRODUCT_ID)
);

CREATE TABLE BUYER_TRANSACTIONS (
    TRANSACTION_ID INT IDENTITY(1,1) PRIMARY KEY,
    ORDER_ID INT NOT NULL,
    AMOUNT DECIMAL(10,2) CHECK (AMOUNT >= 0),
    METHOD NVARCHAR(50) CHECK (METHOD IN ('CREDIT CARD','DEBIT CARD','WALLET','BANK TRANSFER','CASH ON DELIVERY')),
    STATUS NVARCHAR(20) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING','COMPLETED','FAILED','REFUNDED')),
    TRANSACTION_DATE DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ORDER_ID) REFERENCES BUYER_ORDERS(ORDER_ID)
);

CREATE TABLE BUYER_CARTS (
    CART_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID)
);

CREATE TABLE BUYER_CART_ITEMS (
    CART_ITEM_ID INT IDENTITY(1,1) PRIMARY KEY,
    CART_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    QUANTITY INT NOT NULL CHECK (QUANTITY > 0),
    ADDED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CART_ID) REFERENCES BUYER_CARTS(CART_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES BUYER_PRODUCT(PRODUCT_ID)
);

CREATE TABLE BUYER_REVIEWS (
    REVIEW_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    RATING INT CHECK (RATING BETWEEN 1 AND 5),
    COMMENT NVARCHAR(1000),
    REVIEW_DATE DATETIME DEFAULT GETDATE(),
    VERIFIED_PURCHASE BIT DEFAULT 0,
    FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES BUYER_PRODUCT(PRODUCT_ID)
);

CREATE TABLE BUYER_WISHLISTS (
    WISHLIST_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    ADDED_DATE DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES BUYER_PRODUCT(PRODUCT_ID)
);



-- ESCROW WALLET TABLE

CREATE TABLE ESCROW_WALLETS (
    ESCROW_ID INT IDENTITY(1,1) PRIMARY KEY,
    BUYER_ID INT NOT NULL,
    SELLER_ID INT NOT NULL,
    EMPLOYEE_ID INT,
    ORDER_ID INT NOT NULL,
    AMOUNT DECIMAL(12,2) CHECK (AMOUNT >= 0),
    STATUS NVARCHAR(20) DEFAULT 'HELD' CHECK (STATUS IN ('HELD','RELEASED_TO_SELLER','REFUNDED_TO_BUYER','DISPUTED','RESOLVED')),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME,
    RELEASED_AT DATETIME,
    FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID),
    FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES SELLER_ORDERS(ORDER_ID)
);



-- ADD CROSS-REFERENCES FOREIGN KEYS (EXECUTE AFTER ALL TABLES ARE CREATED)

ALTER TABLE BUYER_PRODUCT ADD FOREIGN KEY (SELLER_ID) REFERENCES SELLERS(SELLER_ID);

ALTER TABLE SELLER_ORDERS ADD FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID);

ALTER TABLE SELLER_REVIEWS ADD FOREIGN KEY (BUYER_ID) REFERENCES BUYERS(BUYER_ID);